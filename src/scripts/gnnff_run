#!/usr/bin/env python
import os
import pathlib
import logging
from posixpath import split

import torch
import torch.nn as nn

from gnnff.data.celldata import CellData
from gnnff.model.gnnff import GNNFF
from gnnff.utils.evaluation import evaluate
from gnnff.utils.data import get_loader
from gnnff.utils.training import get_metrics, get_trainer
from gnnff.utils.script_utils import ScriptError, set_random_seed, count_params
from gnnff.utils.parsing import make_parser, read_from_json
from gnnff.utils.poscar import FromPoscarToXml


logging.basicConfig(level=os.environ.get("LOGLEVEL", "INFO"))


def main(args):
    # set up learning environment
    device = torch.device("cuda" if args.cuda else "cpu")

    # set random seed
    set_random_seed(args.seed, logging=logging)

    # get dataset
    logging.info("loading the dataset...")
    dataset = CellData(db_path=args.datapath, cutoff=args.cutoff)

    # get dataloaders
    split_path = os.path.join(args.modelpath, "split.npz")
    train_loader, val_loader, test_loader = get_loader(
        dataset, args, split_path=split_path, logging=logging
    )

    # setup property metrics
    metrics = get_metrics(args)

    # train or eval
    if args.mode == "train":
        # build model
        logging.info("building the GNNFF model...")
        model = GNNFF(
            n_node_feature=args.n_node_feature,
            n_edge_feature=args.n_edge_feature,
            n_message_passing=args.n_message_passing,
            cutoff=args.cutoff,
            gaussian_filter_end=args.gaussian_filter_end,
            trainable_gaussian=args.trainable_gaussian,
            share_weights=args.share_weights,
            return_intermid=False,
            properties=args.predict_property,
            n_output_layers=args.n_output_layers,
        )
        if args.parallel:
            model = nn.DataParallel(model)
        logging.info(
            "The model you built has: {} parameters".format(count_params(model))
        )

        # training
        trainer = get_trainer(args, model, train_loader, val_loader, metrics)
        logging.info("training GNNFF ...")
        torch.backends.cudnn.benchmark = True
        trainer.train(
            device, n_epochs=args.n_epochs, lambda_=args.regularization_lambda
        )
        logging.info("... training done!")

    # train or eval
    elif args.mode == "eval":

        # remove old evaluation files
        evaluation_fp = os.path.join(args.modelpath, "evaluation.txt")
        if os.path.exists(evaluation_fp):
            os.remove(evaluation_fp)

        # load model
        logging.info("loading trained model...")
        model = torch.load(
            os.path.join(args.modelpath, "best_model"), map_location=device
        )

        # run evaluation
        logging.info("evaluating...")
        with torch.no_grad():
            evaluate(
                args,
                model,
                train_loader,
                val_loader,
                test_loader,
                device,
                metrics=metrics,
            )
        logging.info("... evaluation done!")

    else:
        raise ScriptError("Unknown mode: {}".format(args.mode))


if __name__ == "__main__":
    parser = make_parser()
    args = parser.parse_args()
    # from_json
    if args.input == "from_json":
        args = read_from_json(args.json_path)
        main(args)
    # from_poscar
    elif args.input == "from_poscar":
        logging.info(f"load POSCAR file ({args.poscar_path})")
        converter = FromPoscarToXml(
            poscar_path=args.poscar_path, model_path=args.model_path, cuda=args.cuda
        )
        converter(cutoff=args.cutoff)
        save_path = str(
            pathlib.Path(args.poscar_path)
            .parent.joinpath(FromPoscarToXml.showFileName())
            .resolve()
        )
        logging.info(f"... save to {save_path}")
